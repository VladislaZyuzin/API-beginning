import requests
import json
from datetime import datetime

print("=====–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞=====\n")


def get_country():
    while True:
        country = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()

        if country.lower() == 'exit':
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã... ")
            return None, None

        try:
            url = f"https://restcountries.com/v3.1/name/{country}"
            response = requests.get(url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 404:
                print("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                continue

            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ HTTP-–æ—à–∏–±–∫–∏

            data = response.json()
            capital = data[0]['capital'][0]
            print(f"\n–°—Ç—Ä–∞–Ω–∞: {country.title()}")
            print(f"–°—Ç–æ–ª–∏—Ü–∞: {capital}")
            currency_code = list(data[0]['currencies'].keys())[0]
            print(f"–ö–æ–¥ –≤–∞–ª—é—Ç—ã: {currency_code}\n")
            return capital, currency_code, country

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except (KeyError, IndexError):
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        except Exception as e:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


exchange_history = []


def translation(currency_code):
    print("===–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞—Å—Å—á—ë—Ç–∞ –≤–∞–ª—é—Ç—ã===\n")

    def show_history():
        for item in exchange_history:
            print(f"{item['amount_rub']} RUB ‚Üí {item['result']} {item['currency']}")

    while True:

        decision = input(f"–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞', –µ—Å–ª–∏ —Ö–æ—Ç–µ—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ: \n")
        if decision.lower() == '–Ω–µ—Ç':
            print("–í—ã—Ö–æ–¥ –∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            return exchange_history if exchange_history else None
        elif decision.lower() == '–¥–∞':

            try:
                url = f"https://api.exchangerate-api.com/v4/latest/{currency_code}"
                response = requests.get(url)
                data = response.json()
                money = float(input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–æ–∑—å–º—ë—Ç–µ –≤ –ø–æ–µ–∑–¥–∫—É: "))

                abroad_curr = float(data['rates']['RUB'])
                common_ammount = money / abroad_curr
                exchange_history.append({
                    "currency": currency_code,
                    "amount_rub": money,
                    "result": round(common_ammount, 2)
                })

                print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å 1 {currency_code} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {data['rates']['RUB']} —Ä—É–±–ª–µ–π")
                print(
                    f"–ï—Å–ª–∏ –≤—ã –≤–æ–∑–±–º—ë—Ç–µ —Å —Å–æ–±–æ–π {money} —Ä—É–±–ª–µ–π, —Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Ö –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ {round(common_ammount, 2)} {currency_code}")

                show_history()

            except Exception as e:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

        else:
            print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


def weather():
    city = input("\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–ø–æ-—Ä—É—Å—Å–∫–∏) –∏–ª–∏ 'exit': ").strip()
    if city.lower() == 'exit':
        print("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
        return None

    print("\n===–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π===")
    try:
        api_key_for_weather = "b9e91632854834d94ac5fcb020abbd48"
        url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key_for_weather}&units=metric&lang=ru'
        response = requests.get(url)
        data = response.json()
        printed_dates = {}
        target_times = ["09:00:00", "15:00:00", "21:00:00"]
        weather_data = []

        def clothing_advice(tempe):
            if tempe > 25:
                return "ü•µ –ñ–∞—Ä–∫–æ: —Ñ—É—Ç–±–æ–ª–∫–∞, —à–æ—Ä—Ç—ã, –ø–∞–Ω–∞–º–∞, —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏"
            elif 15 <= tempe <= 25:
                return "üòä –¢–µ–ø–ª–æ: –ª—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞, –¥–∂–∏–Ω—Å—ã"
            elif 0 <= tempe < 15:
                return "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ: –ø–∞–ª—å—Ç–æ, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏"
            else:
                return "üßä –ú–æ—Ä–æ–∑: –ø—É—Ö–æ–≤–∏–∫, —Ç–µ—Ä–º–æ–±–µ–ª—å—ë, —à–∞—Ä—Ñ"
        for forecast in data['list']:
            dt_txt = forecast['dt_txt']
            date_str, time = dt_txt.split()  # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ –∏–∑ –Ω—É–∂–Ω—ã—Ö –Ω–∞–º –≤—Ä–µ–º–µ–Ω–∏
            if time in target_times:
                print(f"\n==={date_str}===")
                printed_dates[date_str] = True

                temp = forecast['main']['temp']
                weather = forecast['weather'][0]['description']
                wind = forecast['wind']['speed']
                sea_level = forecast['main'].get('sea_level', 'N/A')
                emoji = {
                    "—è—Å–Ω–æ": "‚òÄÔ∏è",
                    "–¥–æ–∂–¥—å": "üåßÔ∏è",
                    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üåßÔ∏è",
                    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
                    "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚òÅÔ∏è",
                    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚òÅÔ∏è",
                    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå•Ô∏è"
                }.get(weather, " ")

                print(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city}")
                print(f"{time[:5]} - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, {weather.capitalize()}, {emoji}")
                print(f"   –í–µ—Ç–µ—Ä: {wind} –º/—Å, –£—Ä–æ–≤–µ–Ω—å –º–æ—Ä—è: {sea_level}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {clothing_advice(temp)}")  # –í—ã–≤–æ–¥–∏–º —Å–æ–≤–µ—Ç—ã

                weather_data.append({
                    "date": date_str,
                    "time": time[:5],
                    "temp": temp,
                    "weather": weather,
                    "wind": wind,
                    "sea level": sea_level,
                    "clothing_advice": clothing_advice(temp)
                })

        return {"city": city, "forecasts": weather_data}

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except (KeyError, IndexError):
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


def save_report(country, capital, exchange_data, weather_data):
    if not all([country, capital, exchange_data, weather_data]):
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞!")
        return

    report = {
        "country": country,
        "capital": capital,
        "exchange_rates": exchange_data,
        "weather": weather_data,
        "generated_at": datetime.now().strftime("%Y-%m-%d %H:%M")
    }

    filename = f"{country}_travel_report.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=4, ensure_ascii=False)
    print(f"\n–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {filename}")


capital, currency, country = get_country()
if not country:
    exit()

exchange_data = translation(currency)
if not exchange_data:
    exit()

weather_data = weather()
if not weather_data:
    exit()

save_report(country, capital, exchange_data, weather_data)
